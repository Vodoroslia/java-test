
	package com.example.tests;

	import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;

import org.junit.*;

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;

import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

	public class GroupCreationTests {
	  private WebDriver driver;
	  private String baseUrl;
	  private boolean acceptNextAlert = true;
	  private StringBuffer verificationErrors = new StringBuffer();

	  @Before
	  public void setUp() throws Exception {
	    driver = new FirefoxDriver();
	    baseUrl = "http://localhost:8080/";
	    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	  }

	  @Test
	  public void testNonEmptyGroupCreation() throws Exception {
		  openMainPage();
	    gotoGroupPage();
	    initNewGroupCreation();
	    fillGroupForm("group 1", "hesder 1", "footer 1");
	    submitGroupCreation();
	    gotoGroupPage();
	  }

	  @Test
	  public void testEmptyGroupCreation() throws Exception {
		  openMainPage();
	    gotoGroupPage();
	    initNewGroupCreation();
	    fillGroupForm("", "", "");
	    submitGroupCreation();
	    gotoGroupPage();
	  }
	  
	private void submitGroupCreation() {
		//submitGroupCreation
	    driver.findElement(By.name("submit")).click();
	}

	private void fillGroupForm(String name, String header, String footer) {
		//fillGroupForm
	    driver.findElement(By.name("group_name")).clear();
	    driver.findElement(By.name("group_name")).sendKeys(name);
	    driver.findElement(By.name("group_header")).clear();
	    driver.findElement(By.name("group_header")).sendKeys(header);
	    driver.findElement(By.name("group_footer")).clear();
	    driver.findElement(By.name("group_footer")).sendKeys(footer);
	}

	private void initNewGroupCreation() {
		//initNewgroupCreation
	    driver.findElement(By.name("new")).click();
	}

	private void gotoGroupPage() {
		//gotoGroupPage
	    driver.findElement(By.linkText("groups")).click();
	}

	private void openMainPage() {
		// openMainPage
	    driver.get(baseUrl + "/addressbookv4.1.4/group.php");
	}

	  @After
	  public void tearDown() throws Exception {
	    driver.quit();
	    String verificationErrorString = verificationErrors.toString();
	    if (!"".equals(verificationErrorString)) {
	      fail(verificationErrorString);
	    }
	  }

	  private boolean isElementPresent(By by) {
	    try {
	      driver.findElement(by);
	      return true;
	    } catch (NoSuchElementException e) {
	      return false;
	    }
	  }

	  private boolean isAlertPresent() {
	    try {
	      driver.switchTo().alert();
	      return true;
	    } catch (NoAlertPresentException e) {
	      return false;
	    }
	  }

	  private String closeAlertAndGetItsText() {
	    try {
	      Alert alert = driver.switchTo().alert();
	      String alertText = alert.getText();
	      if (acceptNextAlert) {
	        alert.accept();
	      } else {
	        alert.dismiss();
	      }
	      return alertText;
	    } finally {
	      acceptNextAlert = true;
	    }
	  }
	}


